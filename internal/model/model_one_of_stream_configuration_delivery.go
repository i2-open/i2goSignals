/*
 * Stream Management API for OpenID Shared Security Events
 *
 * [OpenID Spec](https://openid.net/specs/openid-sse-framework-1_0.html#management)  HTTP API to be implemented by Event Transmitters. This API can be used by Event Receivers to query and update the Event Stream configuration and status, to add and remove subjects, and to trigger verification.
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package model

import (
	"encoding/json"
	"errors"
	"strings"
)

type OneOfStreamConfigurationDelivery struct {
	*PushTransmitMethod
	*PushReceiveMethod
	*PollTransmitMethod
	*PollReceiveMethod
}

func (d *OneOfStreamConfigurationDelivery) MarshalJSON() ([]byte, error) {
	// Required because json.Marshal doesn't seem to handle two optional structures.
	if d.PushTransmitMethod != nil {
		return json.Marshal(d.PushTransmitMethod)
	}
	if d.PollTransmitMethod != nil {
		return json.Marshal(d.PollTransmitMethod)
	}
	if d.PollReceiveMethod != nil {
		return json.Marshal(d.PollReceiveMethod)
	}
	if d.PushReceiveMethod != nil {
		return json.Marshal(d.PushReceiveMethod)
	}
	return []byte("{}"), nil
}

func (d *OneOfStreamConfigurationDelivery) GetMethod() string {
	if d.PushTransmitMethod != nil {
		return DeliveryPush
	}

	if d.PushReceiveMethod != nil {
		return ReceivePush
	}

	if d.PollTransmitMethod != nil {
		return DeliveryPoll
	}

	if d.PollReceiveMethod != nil {
		return ReceivePoll
	}
	return "DEFAULT"
}

func (d *OneOfStreamConfigurationDelivery) GetEndpointUrl() string {
	switch d.GetMethod() {
	case DeliveryPush:
		return d.PushTransmitMethod.EndpointUrl
	case DeliveryPoll:
		return d.PollTransmitMethod.EndpointUrl
	case ReceivePush:
		return d.PushReceiveMethod.EndpointUrl
	case ReceivePoll:
		return d.PollReceiveMethod.EndpointUrl
	}
	return "" // won't happen unless a new method defined
}

func (d *OneOfStreamConfigurationDelivery) GetAuthorizationHeader() string {
	switch d.GetMethod() {
	case DeliveryPush:
		return d.PushTransmitMethod.AuthorizationHeader
	case DeliveryPoll:
		return d.PollTransmitMethod.AuthorizationHeader
	case ReceivePush:
		return d.PushReceiveMethod.AuthorizationHeader
	case ReceivePoll:
		return d.PollReceiveMethod.AuthorizationHeader
	}
	return "" // won't happen unless a new method defined
}

func (d *OneOfStreamConfigurationDelivery) UnmarshalJSON(data []byte) error {
	dataString := string(data)
	if dataString == "null" || dataString == `""` {
		d.PollTransmitMethod = nil
		d.PushTransmitMethod = nil
		return nil
	}

	lowString := strings.ToLower(dataString)
	if strings.Contains(lowString, DeliveryPoll) {
		if strings.Contains(lowString, ReceivePoll) {
			var poll PollReceiveMethod
			err := json.Unmarshal(data, &poll)
			if err != nil {
				return err
			}
			d.PollReceiveMethod = &poll
			return nil
		} else {
			var poll PollTransmitMethod
			err := json.Unmarshal(data, &poll)
			if err != nil {
				return err
			}
			d.PollTransmitMethod = &poll
			return nil
		}
	} else {
		if strings.Contains(lowString, DeliveryPush) {
			if strings.Contains(lowString, ReceivePush) {
				var push PushReceiveMethod
				err := json.Unmarshal(data, &push)
				if err != nil {
					return err
				}
				d.PushReceiveMethod = &push
				return nil
			} else {
				var push PushTransmitMethod
				err := json.Unmarshal(data, &push)
				if err != nil {
					return err
				}
				d.PushTransmitMethod = &push
				return nil
			}
		}
	}
	return errors.New("Unknown Stream delivery_method value.")
}
