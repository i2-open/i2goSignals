/*
 * Stream Management API for OpenID Shared Security Events
 *
 * [OpenID Spec](https://openid.net/specs/openid-sse-framework-1_0.html#management)  HTTP API to be implemented by Event Transmitters. This API can be used by Event Receivers to query and update the Event Stream configuration and status, to add and remove subjects, and to trigger verification.
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package model

type PollParameters struct {
	// An OPTIONAL integer value indicating the maximum number of unacknowledged SETs to be returned. The SET Transmitter SHOULD NOT send more SETs than the specified maximum. If more than the maximum number of SETs are available, the SET Transmitter determines which to return first; the oldest SETs available MAY be returned first, or another selection algorithm MAY be used, such as prioritizing SETs in some manner that makes sense for the use case. A value of 0 MAY be used by SET Recipients that would like to perform an acknowledge-only request. This enables the Recipient to use separate HTTP requests for acknowledgement and reception of SETs. If this parameter is omitted, no limit is placed on the number of SETs to be returned.
	MaxEvents int32 `json:"maxEvents,omitempty"`
	// An OPTIONAL JSON boolean value that indicates the SET Transmitter SHOULD return an immediate response even if no results are available (short polling). The default value is false, which indicates the request is to be treated as an HTTP long poll, per [Section 2](https://www.rfc-editor.org/rfc/rfc6202#section-2) of [RFC6202](https://www.rfc-editor.org/rfc/rfc8936.html#RFC6202). The timeout for the request is part of the configuration between the participants, which is out of scope of this specification.
	ReturnImmediately bool `json:"returnImmediately,omitempty"`
	// List of event JTIs that the receiver is acknowledging. The Transmitter can stop keeping track of these.
	Acks        []string                `json:"ack,omitempty"`
	SetErrs     map[string]SetErrorType `json:"setErrs,omitempty"`
	TimeoutSecs int                     `json:"timeoutSecs,omitempty"`
}

type PollResponse struct {
	Sets          map[string]string `json:"sets"`
	MoreAvailable bool              `json:"moreAvailable,omitempty"`
}

type SetErrorType struct {
	Error       string `json:"err"`
	Description string `json:"description,omitempty"`
}
