/*
 * Stream Management API for OpenID Shared Security Events
 *
 * [OpenID Spec](https://openid.net/specs/openid-sse-framework-1_0.html#management)  HTTP API to be implemented by Event Transmitters. This API can be used by Event Receivers to query and update the Event Stream configuration and status, to add and remove subjects, and to trigger verification.
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package server

import (
	"encoding/json"
	"i2goSignals/internal/model"
	"net/http"
	"strings"
)

func (sa *SignalsApplication) Register(w http.ResponseWriter, r *http.Request) {
	var jsonRequest model.RegisterParameters
	err := json.NewDecoder(r.Body).Decode(&jsonRequest)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	response := sa.Provider.RegisterStream(jsonRequest)
	if response == nil {
		w.WriteHeader(http.StatusInternalServerError)
		return
	}

	if response.PushUrl != "" {
		baseUrl := sa.BaseUrl
		pushUri, err := baseUrl.Parse(response.PushUrl)

		if err == nil && pushUri != nil {
			response.PushUrl = pushUri.String()
		}
	}

	sid, err := sa.Provider.AuthenticateToken(response.Token)
	if err != nil {
		serverLog.Println("ERROR: Issued token was not validated: " + err.Error())

		http.Error(w, "Failed to issue stream token", http.StatusInternalServerError)
		return
	}
	state, _ := sa.Provider.GetStreamState(sid)
	sa.EventRouter.UpdateStreamState(state)
	// TODO: Update Event Router about stream change
	regBytes, _ := json.MarshalIndent(response, "", " ")
	w.Write(regBytes)
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
}

func (sa *SignalsApplication) TriggerEvent(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusNotImplemented)
}

// getHost tries its best to return the request host.
func getHost(r *http.Request) string {
	if r.URL.IsAbs() {
		host := r.Host
		// Slice off any port information.
		if i := strings.Index(host, ":"); i != -1 {
			host = host[:i]
		}
		return host
	}
	return r.URL.String()
}
